@model HortalisCSharp.Models.ViewModels.RelatoriosViewModel
@{
    ViewData["Title"] = "Relatórios";
}

<div class="container" style="max-width: 980px; margin-top: 90px;">
    <form id="antiForgery">@Html.AntiForgeryToken()</form>

    <div class="text-center mb-4">
        <h2 class="mt-3 fw-bold">Relatórios</h2>
        <div class="text-muted">Visão geral do sistema</div>
    </div>

    <div class="row g-3">
        <div class="col-12 col-md-4">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <div class="small text-muted">Hortas cadastradas</div>
                            <div class="display-6 fw-bold">@Model.TotalHortas</div>
                        </div>
                        <div class="text-success">
                            <i class="bi bi-flower1" style="font-size: 2rem;"></i>
                        </div>
                    </div>
                    <div class="mt-3 small text-muted">
                        Média de produtos por horta: <strong>@Model.MediaProdutosPorHorta</strong><br />
                        Hortas recentes: <strong>@Model.HortasRecentes.Count()</strong>
                    </div>
                </div>
                <div class="card-footer bg-white border-0 small text-muted">
                    Total de registros na base
                </div>
            </div>
        </div>

        <div class="col-12 col-md-4">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <div class="small text-muted">Produtos disponíveis</div>
                            <div class="display-6 fw-bold">@Model.TotalProdutos</div>
                        </div>
                        <div class="text-success">
                            <i class="bi bi-basket2" style="font-size: 2rem;"></i>
                        </div>
                    </div>
                    <div class="mt-3 small text-muted">
                        Produtos sem associação: <strong>@Model.ProdutosSemHorta</strong><br />
                        Top produto: <strong>@(Model.TopProdutos.FirstOrDefault()?.Nome ?? "-")</strong>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-4">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <div class="small text-muted">Usuários</div>
                            <div class="display-6 fw-bold">@Model.TotalUsuarios</div>
                        </div>
                        <div class="text-success">
                            <i class="bi bi-people" style="font-size: 2rem;"></i>
                        </div>
                    </div>
                    <div class="mt-3 small text-muted">
                        Usuários com mais hortas: <strong>@(Model.TopUsuarios.FirstOrDefault()?.Nome ?? "-")</strong>
                    </div>
                </div>
                <div class="card-footer bg-white border-0 small text-muted">
                    Contagem total de usuários
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4 g-3">
        <div class="col-12 col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Top produtos</span>
                </div>

                <div class="p-2">
                    <input id="prodSearch" class="form-control form-control-sm mb-2"
                        placeholder="Buscar produto..." />
                    <div class="list-group" id="prodList"
                        style="max-height: 280px; overflow:auto;">
                        @if (Model.TopProdutos?.Any() == true)
                        {
                            foreach (var p in Model.TopProdutos)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center prod-item">
                                    <div class="prod-name">@p.Nome</div>
                                    <span class="badge bg-success">@p.Count</span>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="list-group-item text-muted">Nenhum produto encontrado</div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-header">
                    Top usuários (mais hortas)
                </div>
                <ul class="list-group list-group-flush">
                    @if (Model.TopUsuarios?.Any() == true)
                    {
                        foreach (var u in Model.TopUsuarios)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>@u.Nome</div>
                                <span class="badge bg-primary">@u.Count</span>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">Nenhum usuário com hortas</li>
                    }
                </ul>
            </div>
        </div>

        <div class="col-12 col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-header">
                    Últimas hortas
                </div>
                <ul class="list-group list-group-flush">
                    @if (Model.HortasRecentes?.Any() == true)
                    {
                        foreach (var h in Model.HortasRecentes)
                        {
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div class="fw-semibold">@h.Nome</div>
                                        <div class="small text-muted">@h.UsuarioNome</div>
                                    </div>
                                    <div class="text-end">
                                        <div class="small text-muted">
                                            @((h.UltimaAlteracao ?? h.CriadoEm).ToLocalTime().ToString("dd/MM/yyyy"))
                                        </div>
                                        <div class="badge bg-secondary mt-1">@h.ProdutoCount produtos</div>
                                    </div>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">Nenhuma horta recente</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <!-- Nova seção: Lista editável de usuários -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Usuários — editar papéis</span>
                    <small class="text-muted">Alterações são aplicadas imediatamente</small>
                </div>

                <div class="list-group list-group-flush" id="usersList" style="max-height:420px; overflow:auto;">
                    @if (Model.Usuarios?.Any() == true)
                    {
                        foreach (var u in Model.Usuarios)
                        {
                            <div class="list-group-item d-flex align-items-center justify-content-between user-row" data-user-id="@u.UsuarioId">
                                <div class="me-3" style="min-width:260px;">
                                    <div class="fw-semibold">@u.Nome</div>
                                    <div class="small text-muted">@u.Email</div>
                                </div>
                                <div class="d-flex align-items-center gap-2">
                                    <select class="form-select form-select-sm user-role-select" style="width:240px;">
                                        <option value="0" selected="@(u.Papel == 0 ? "selected" : null)">Padrão</option>
                                        <option value="1" selected="@(u.Papel == 1 ? "selected" : null)">Gerente</option>
                                        <option value="2" selected="@(u.Papel == 2 ? "selected" : null)">Administrador</option>
                                    </select>
                                    <div class="status-indicator" style="width:36px; text-align:center;"></div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="list-group-item text-muted">Nenhum usuário encontrado</div>
                    }
                </div>
                <div class="card-footer bg-white border-0 small text-muted">
                    Use esse painel para ajustar rapidamente os papéis dos usuários.
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            const tokenInput = document.querySelector('#antiForgery input[name="__RequestVerificationToken"]');
            const token = tokenInput ? tokenInput.value : null;

            function showStatus(el, type, msg) {
                el.innerHTML = '';
                if (type === 'loading') {
                    el.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
                } else if (type === 'ok') {
                    el.innerHTML = '<i class="bi bi-check-circle-fill text-success"></i>';
                    setTimeout(() => el.innerHTML = '', 1500);
                } else {
                    el.innerHTML = '<i class="bi bi-x-circle-fill text-danger" title="' + (msg || '') + '"></i>';
                    setTimeout(() => el.innerHTML = '', 2500);
                }
            }

            document.querySelectorAll('.user-role-select').forEach(select => {
                select.addEventListener('change', async function () {
                    const row = this.closest('.user-row');
                    if (!row) return;
                    const userId = row.getAttribute('data-user-id');
                    const papel = this.value;
                    const statusEl = row.querySelector('.status-indicator');

                    showStatus(statusEl, 'loading');

                    try {
                        const body = new URLSearchParams();
                        body.append('id', userId);
                        body.append('papel', papel);

                        const res = await fetch('/Admin/AtualizarPapel', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                'RequestVerificationToken': token
                            },
                            body: body.toString()
                        });

                        if (!res.ok) {
                            const txt = await res.text().catch(() => res.statusText);
                            showStatus(statusEl, 'error', txt);
                            return;
                        }

                        showStatus(statusEl, 'ok');
                    } catch (err) {
                        showStatus(statusEl, 'error', err?.message || 'Erro');
                    }
                });
            });
        })();
    </script>

    <script>
        (function () {
            const input = document.getElementById('prodSearch');
            const listContainer = document.getElementById('prodList');
            if (!input || !listContainer) return;

            function normalize(s) {
                // remove acentos e normaliza
                return (s || '').toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '').trim();
            }

            function getItems() {
                return Array.from(listContainer.querySelectorAll('.prod-item'));
            }

            input.addEventListener('input', function () {
                const q = normalize(this.value);
                const items = getItems();
                items.forEach(item => {
                    const nameEl = item.querySelector('.prod-name');
                    const name = normalize(nameEl ? nameEl.textContent : '');
                    item.style.display = q === '' || name.includes(q) ? '' : 'none';
                });
            });
        })();
    </script>
}